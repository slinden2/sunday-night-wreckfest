{"version":3,"sources":["components/Navigation.tsx","hooks/useFetchData.tsx","config.ts","components/PageContainer.tsx","components/Table/index.tsx","components/LoadingIndicator.tsx","components/calendar/CalendarContent.tsx","components/calendar/CalendarContainer.tsx","utils/index.ts","components/standings/StandingsContent.tsx","components/Dropdown.tsx","components/standings/StandingsContainer.tsx","components/snw/SNWContent.tsx","components/snw/SNWContainer.tsx","App.tsx","index.tsx"],"names":["navLinks","title","url","Navigation","map","link","key","to","useFetchData","React","useState","data","setData","loading","setLoading","error","setError","useCallback","a","fetch","response","json","PageContainer","children","Table","headers","headerMap","header","row","i","col","LoadingIndicator","date","trackName","qLaps","raceLaps","CalendarContent","seasons","season","seasonId","seasonName","events","raceCalendarUrl","config","CalendarContainer","calendar","invoke","useEffect","loadRaceCalendar","eventsBySeason","reduce","acc","cur","event","push","Object","keys","calendarToSeasons","driverName","racesDriven","points","powerLimit","StandingsContent","standings","Dropdown","options","selected","setSelected","value","onChange","target","opt","content","standingsUrl","getOptions","some","StandingsContainer","temp","loadStandings","standingsToShow","filter","SNWContent","SNWContainer","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85ee75a0.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { INavItem } from \"../types\";\n\nconst navLinks: INavItem[] = [\n  {\n    title: \"Kalenteri\",\n    url: \"/\",\n  },\n  {\n    title: \"Sarjataulukko\",\n    url: \"/standings\",\n  },\n  {\n    title: \"SNW\",\n    url: \"/snw\",\n  },\n];\n\nconst Navigation = () => {\n  return (\n    <div>\n      <ul>\n        {navLinks.map(link => (\n          <li key={link.title}>\n            <NavLink to={link.url}>{link.title}</NavLink>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\n\ninterface IFetchDataResponse {\n  data: any;\n  loading: boolean;\n  error: boolean;\n}\n\ntype LoadFunction = () => Promise<void>;\ntype FetchDataReturn = [IFetchDataResponse, LoadFunction];\n\nconst useFetchData = (url: string): FetchDataReturn => {\n  const [data, setData] = React.useState<any>(null);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState(false);\n\n  const init = () => {\n    setData(null);\n    setLoading(true);\n    setError(false);\n  };\n\n  const invoke = React.useCallback(async () => {\n    init();\n    try {\n      const response = await fetch(url);\n      const json = await response.json();\n      setData(json);\n    } catch (err) {\n      setError(true);\n    }\n    setLoading(false);\n  }, [url]);\n\n  return [{ data, loading, error }, invoke];\n};\n\nexport default useFetchData;\n","const port = 3001;\nconst baseUrl = `http://localhost:${port}/api`;\n\nexport default {\n  port,\n  baseUrl,\n};\n","import React from \"react\";\n\ninterface Props {\n  title: string;\n  children: React.ReactNode | React.ReactNode[];\n}\n\nconst PageContainer: React.FC<Props> = ({ title, children }: Props) => {\n  return (\n    <div>\n      <h1>{title}</h1>\n      {children}\n    </div>\n  );\n};\n\nexport default PageContainer;\n","import React from \"react\";\n\ninterface Props {\n  data: Array<any>;\n  headers: string[];\n  headerMap: {\n    [field: string]: string;\n  };\n}\n\nconst Table = ({ data, headers, headerMap }: Props) => {\n  return (\n    <table>\n      <thead>\n        <tr>\n          {headers.map(header => (\n            <th key={header}>{headerMap[header]}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((row, i) => (\n          <tr key={i}>\n            {headers.map(col => (\n              <td key={col}>{row[col]}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","import React from \"react\";\n\nconst LoadingIndicator = () => {\n  return <div>Loading...</div>;\n};\n\nexport default LoadingIndicator;\n","import React from \"react\";\nimport { ISeason } from \"../../types\";\nimport Table from \"../Table\";\nimport LoadingIndicator from \"../LoadingIndicator\";\n\ninterface Props {\n  seasons: ISeason[];\n  loading: boolean;\n}\n\nconst headerMap = {\n  date: \"Date\",\n  trackName: \"Track\",\n  qLaps: \"Q Laps\",\n  raceLaps: \"Race Laps\",\n};\n\nconst headers = [\"date\", \"trackName\", \"qLaps\", \"raceLaps\"];\n\nconst CalendarContent = ({ seasons, loading }: Props) => {\n  if (loading || !seasons) {\n    return <LoadingIndicator />;\n  }\n\n  return (\n    <>\n      {seasons.map(season => (\n        <div key={season.seasonId}>\n          <h2>{season.seasonName}</h2>\n          <Table data={season.events} headers={headers} headerMap={headerMap} />\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default CalendarContent;\n","import React from \"react\";\nimport { useFetchData } from \"../../hooks\";\nimport config from \"../../config\";\nimport { IRaceCalendarEvent, ISeason } from \"../../types\";\nimport PageContainer from \"../PageContainer\";\nimport CalendarContent from \"./CalendarContent\";\nimport { calendarToSeasons } from \"../../utils\";\n\nconst raceCalendarUrl = config.baseUrl + \"/races\";\n\nconst CalendarContainer = () => {\n  const [calendar, invoke] = useFetchData(raceCalendarUrl);\n  const { data, loading } = calendar;\n\n  React.useEffect(() => {\n    const loadRaceCalendar = async () => {\n      await invoke();\n    };\n    loadRaceCalendar();\n  }, [invoke]);\n\n  let seasons: ISeason[] = [];\n  if (!loading && data) {\n    seasons = calendarToSeasons(data as IRaceCalendarEvent[]);\n  }\n\n  return (\n    <PageContainer title=\"Kisakalenteri\">\n      <CalendarContent seasons={seasons} loading={loading} />\n    </PageContainer>\n  );\n};\n\nexport default CalendarContainer;\n","import { IRaceCalendarEvent, ISeason, ISeasonHash } from \"../types\";\n\ninterface HasEventId {\n  eventId: string;\n}\n\nexport function arrToObj<T extends HasEventId>(arr: T[]) {\n  return arr.reduce((acc, cur) => {\n    return {\n      ...acc,\n      [cur.eventId]: cur,\n    };\n  }, {});\n}\n\n// Converts simple calendar events to an array\n// grouped of objects grouped by season.\nexport function calendarToSeasons(events: IRaceCalendarEvent[]): ISeason[] {\n  const eventsBySeason = events.reduce<ISeasonHash>(\n    (acc, cur: IRaceCalendarEvent) => {\n      const { seasonId, seasonName, ...event } = cur;\n      if (!acc[cur.seasonId]) {\n        acc[seasonId] = {\n          seasonId,\n          seasonName,\n          events: [event],\n        };\n      } else {\n        acc[seasonId].events.push(event);\n      }\n      return acc;\n    },\n    {}\n  );\n\n  const seasons: ISeason[] = Object.keys(eventsBySeason).map(key => ({\n    ...eventsBySeason[key],\n  }));\n\n  return seasons;\n}\n","import React from \"react\";\nimport { IStandingRow } from \"../../types\";\nimport Table from \"../Table\";\n\ninterface Props {\n  standings: IStandingRow[];\n}\n\nconst headers = [\"driverName\", \"racesDriven\", \"points\", \"powerLimit\"];\n\nconst headerMap = {\n  driverName: \"Driver\",\n  racesDriven: \"Races\",\n  points: \"Points\",\n  powerLimit: \"Power Limit\",\n};\nconst StandingsContent = ({ standings }: Props) => {\n  return (\n    <div>\n      <h2>{standings[0].seasonName}</h2>\n      <Table data={standings} headers={headers} headerMap={headerMap} />\n    </div>\n  );\n};\n\nexport default StandingsContent;\n","import React from \"react\";\n\ninterface Props {\n  options: Array<any>;\n  selected: string;\n  setSelected: React.Dispatch<React.SetStateAction<string>>;\n}\n\nconst Dropdown = ({ options, selected, setSelected }: Props) => {\n  return (\n    <select\n      value={selected}\n      onChange={event => setSelected(event.target.value)}\n    >\n      {options.map(opt => (\n        <option key={opt.value} value={opt.value}>\n          {opt.content}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nexport default Dropdown;\n","import React from \"react\";\nimport { useFetchData } from \"../../hooks\";\nimport config from \"../../config\";\n\nimport PageContainer from \"../PageContainer\";\nimport StandingsContent from \"./StandingsContent\";\nimport { IStandingRow } from \"../../types\";\nimport Dropdown from \"../Dropdown\";\nimport LoadingIndicator from \"../LoadingIndicator\";\n\nconst standingsUrl = config.baseUrl + \"/standings\";\n\nexport type Options = {\n  value: string;\n  content: string;\n};\n\nexport type StandingsHash = {\n  seasonId: string;\n  seasonName: string;\n};\n\nconst getOptions = (standings: IStandingRow[]): Options[] => {\n  const options: Options[] = [];\n\n  for (const row of standings) {\n    if (options.some(opt => row.seasonId === opt.value)) {\n      continue;\n    } else {\n      options.push({ value: row.seasonId, content: row.seasonName });\n    }\n  }\n\n  return options;\n};\n\nconst StandingsContainer = () => {\n  const [data, invoke] = useFetchData(standingsUrl);\n  const [selected, setSelected] = React.useState<string>(\"0400\");\n  const { data: temp, loading } = data;\n  const standings = temp as IStandingRow[];\n\n  React.useEffect(() => {\n    const loadStandings = async () => {\n      await invoke();\n    };\n    loadStandings();\n  }, [invoke]);\n\n  if (loading || !standings) {\n    return <LoadingIndicator />;\n  }\n\n  const standingsToShow = standings.filter(row => row.seasonId === selected);\n\n  return (\n    <PageContainer title=\"Sarjataulukko\">\n      <Dropdown\n        options={getOptions(standings)}\n        selected={selected}\n        setSelected={setSelected}\n      />\n      <StandingsContent standings={standingsToShow} />\n    </PageContainer>\n  );\n};\n\nexport default StandingsContainer;\n","import React from \"react\";\n\nconst SNWContent = () => {\n  return (\n    <div>\n      <h2>Mikä on SNW?</h2>\n      <p>\n        Lorem ipsum, dolor sit amet consectetur adipisicing elit. Laudantium ut\n        tenetur, animi ratione voluptatem, illum saepe voluptatum beatae eius\n        earum, excepturi commodi veniam fugiat molestiae. Repudiandae adipisci\n        similique doloremque odio.\n      </p>\n      <p>\n        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aspernatur,\n        officiis dignissimos. Minima consequuntur perferendis rem deleniti\n        voluptatem deserunt, cum quae et exercitationem vel libero qui, officia\n        quaerat inventore? Laudantium, corrupti?\n      </p>\n    </div>\n  );\n};\n\nexport default SNWContent;\n","import React from \"react\";\nimport PageContainer from \"../PageContainer\";\nimport SNWContent from \"./SNWContent\";\n\nconst SNWContainer = () => {\n  return (\n    <PageContainer title=\"Sunday Night Wreckfest\">\n      <SNWContent />\n    </PageContainer>\n  );\n};\n\nexport default SNWContainer;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Navigation from \"./components/Navigation\";\nimport CalendarContainer from \"./components/calendar/CalendarContainer\";\nimport StandingsContainer from \"./components/standings/StandingsContainer\";\nimport SNWContainer from \"./components/snw/SNWContainer\";\n\nconst App = () => {\n  return (\n    <Router>\n      <div>\n        <Navigation />\n        <Switch>\n          <Route exact path=\"/\">\n            <CalendarContainer />\n          </Route>\n          <Route path=\"/standings\">\n            <StandingsContainer />\n          </Route>\n          <Route path=\"/snw\">\n            <SNWContainer />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}