{"version":3,"sources":["hooks/useFetchData.tsx","App.tsx","config.ts","index.tsx"],"names":["useFetchData","url","React","useState","data","setData","loading","setLoading","error","setError","useCallback","a","fetch","response","json","raceCalendarUrl","App","invoke","useEffect","loadRaceCalendar","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8KAqCeA,EA1BM,SAACC,GAAkC,IAAD,EAC7BC,IAAMC,SAAc,MADS,mBAC9CC,EAD8C,KACxCC,EADwC,OAEvBH,IAAMC,UAAS,GAFQ,mBAE9CG,EAF8C,KAErCC,EAFqC,OAG3BL,IAAMC,UAAS,GAHY,mBAG9CK,EAH8C,KAGvCC,EAHuC,KAuBrD,MAAO,CAAC,CAAEL,OAAME,UAASE,SAZVN,IAAMQ,YAAN,sBAAkB,8BAAAC,EAAA,6DAL/BN,EAAQ,MACRE,GAAW,GACXE,GAAS,GAGsB,kBAGNG,MAAMX,GAHA,cAGvBY,EAHuB,gBAIVA,EAASC,OAJC,OAIvBA,EAJuB,OAK7BT,EAAQS,GALqB,kDAO7BL,GAAS,GAPoB,QAS/BF,GAAW,GAToB,0DAU9B,CAACN,MC5BAc,ECHO,2BADA,MDI4B,aAyB1BC,EAvBH,WAAO,IAAD,EAC2BhB,EAAae,GADxC,0BACPX,EADO,EACPA,KAAME,EADC,EACDA,QAASE,EADR,EACQA,MAASS,EADjB,KAUhB,OAPAf,IAAMgB,WAAU,YACQ,uCAAG,sBAAAP,EAAA,sEACjBM,IADiB,2CAAH,qDAGtBE,KACC,CAACF,IAEAX,EACK,2CAGLE,EACK,0CAGTY,QAAQC,IAAI,OAAQjB,GAEb,sCEtBTkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.5baf4607.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface IFetchDataResponse {\n  data: any;\n  loading: boolean;\n  error: boolean;\n}\n\ntype LoadFunction = () => Promise<void>;\ntype FetchDataReturn = [IFetchDataResponse, LoadFunction];\n\nconst useFetchData = (url: string): FetchDataReturn => {\n  const [data, setData] = React.useState<any>(null);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState(false);\n\n  const init = () => {\n    setData(null);\n    setLoading(true);\n    setError(false);\n  };\n\n  const invoke = React.useCallback(async () => {\n    init();\n    try {\n      const response = await fetch(url);\n      const json = await response.json();\n      setData(json);\n    } catch (err) {\n      setError(true);\n    }\n    setLoading(false);\n  }, [url]);\n\n  return [{ data, loading, error }, invoke];\n};\n\nexport default useFetchData;\n","import React from \"react\";\nimport { useFetchData } from \"./hooks\";\nimport config from \"./config\";\n\nconst raceCalendarUrl = config.baseUrl + \"/api/races\";\n\nconst App = () => {\n  const [{ data, loading, error }, invoke] = useFetchData(raceCalendarUrl);\n\n  React.useEffect(() => {\n    const loadRaceCalendar = async () => {\n      await invoke();\n    };\n    loadRaceCalendar();\n  }, [invoke]);\n\n  if (loading) {\n    return <div>loading...</div>;\n  }\n\n  if (error) {\n    return <div>error...</div>;\n  }\n\n  console.log(\"data\", data);\n\n  return <div>SNW</div>;\n};\n\nexport default App;\n","const port = 3001;\nconst baseUrl = `http://localhost:${port}`;\n\nexport default {\n  port,\n  baseUrl,\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}