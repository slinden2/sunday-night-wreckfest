{"version":3,"sources":["components/Navigation.tsx","config.ts","components/PageContainer.tsx","components/Table/index.tsx","components/LoadingIndicator.tsx","utils/index.ts","state/reducer.ts","state/state.tsx","components/calendar/CalendarContent.tsx","components/calendar/CalendarContainer.tsx","components/standings/StandingsContent.tsx","components/Dropdown.tsx","components/standings/StandingsContainer.tsx","components/snw/SNWContent.tsx","components/snw/SNWContainer.tsx","components/race/RaceContent.tsx","components/race/RaceContainer.tsx","App.tsx","index.tsx"],"names":["navLinks","title","url","Navigation","map","link","key","to","id","PageContainer","children","Table","data","headers","headerMap","header","row","i","col","LoadingIndicator","convertTimeToSecs","time","split","segment","Number","reduce","acc","cur","setCalendar","calendar","type","payload","events","eventsBySeason","seasonId","seasonName","event","push","Object","keys","calendarToSeasons","setRaces","race","setStandings","standings","initialState","races","StateContext","React","createContext","StateProvider","reducer","useReducer","state","dispatch","Provider","value","useStateValue","useContext","date","trackName","qLaps","raceLaps","CalendarContent","length","season","raceCalendarUrl","config","CalendarContainer","isLoading","useEffect","a","fetch","response","json","dataWithLinks","eventId","console","error","loadRaceCalendar","driverName","racesDriven","points","powerLimit","StandingsContent","sortedStandings","sort","b","Dropdown","options","selected","setSelected","onChange","target","opt","content","getOptions","some","StandingsContainer","useState","standingsUrl","loadStandings","standingsToShow","filter","SNWContent","SNWContainer","qHeaders","qHeaderMap","qTime","group","raceHeaders","raceHeaderMap","seasonPoints","heatPositions","heatPoints","RaceContent","qDetails","details","raceDetails","driver","join","hasPowerLimit","RaceContainer","useParams","raceUrl","loadRaceData","find","App","exact","path","ReactDOM","render","StrictMode","action","document","getElementById"],"mappings":"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","file":"static/js/main.7a385f44.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { INavItem } from \"../types\";\n\nconst navLinks: INavItem[] = [\n  {\n    title: \"Kalenteri\",\n    url: \"/\",\n  },\n  {\n    title: \"Sarjataulukko\",\n    url: \"/standings\",\n  },\n  {\n    title: \"SNW\",\n    url: \"/snw\",\n  },\n];\n\nconst Navigation = () => {\n  return (\n    <div>\n      <ul>\n        {navLinks.map(link => (\n          <li key={link.title}>\n            <NavLink to={link.url}>{link.title}</NavLink>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Navigation;\n","const baseUrl = `/api`;\nconst getRaceUrl = (id: string) => `/races/${id}`;\n\nexport default {\n  baseUrl,\n  getRaceUrl,\n};\n","import React from \"react\";\n\ninterface Props {\n  title: string;\n  children: React.ReactNode | React.ReactNode[];\n}\n\nconst PageContainer: React.FC<Props> = ({ title, children }: Props) => {\n  return (\n    <div>\n      <h1>{title}</h1>\n      {children}\n    </div>\n  );\n};\n\nexport default PageContainer;\n","import React from \"react\";\n\ninterface Props {\n  data: Array<any>;\n  headers: string[];\n  headerMap: {\n    [field: string]: string;\n  };\n}\n\nconst Table = ({ data, headers, headerMap }: Props) => {\n  return (\n    <table>\n      <thead>\n        <tr>\n          {headers.map(header => (\n            <th key={header}>{headerMap[header]}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((row, i) => (\n          <tr key={i}>\n            {headers.map(col => (\n              <td key={col}>{row[col]}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","import React from \"react\";\n\nconst LoadingIndicator = () => {\n  return <div>Loading...</div>;\n};\n\nexport default LoadingIndicator;\n","import { IRaceCalendarEvent, ISeason, ISeasonHash } from \"../types\";\n\ninterface HasEventId {\n  eventId: string;\n}\n\nexport function arrToObj<T extends HasEventId>(arr: T[]) {\n  return arr.reduce((acc, cur) => {\n    return {\n      ...acc,\n      [cur.eventId]: cur,\n    };\n  }, {});\n}\n\n// Converts simple calendar events to an array\n// grouped of objects grouped by season.\nexport function calendarToSeasons(events: IRaceCalendarEvent[]): ISeason[] {\n  const eventsBySeason = events.reduce<ISeasonHash>(\n    (acc, cur: IRaceCalendarEvent) => {\n      const { seasonId, seasonName, ...event } = cur;\n      if (!acc[cur.seasonId]) {\n        acc[seasonId] = {\n          seasonId,\n          seasonName,\n          events: [event],\n        };\n      } else {\n        acc[seasonId].events.push(event);\n      }\n      return acc;\n    },\n    {}\n  );\n\n  const seasons: ISeason[] = Object.keys(eventsBySeason).map(key => ({\n    ...eventsBySeason[key],\n  }));\n\n  return seasons;\n}\n\n// Supported format: MM:SS,FFF\nexport const convertTimeToSecs = (time: string): number => {\n  return time\n    .split(/[:,]/)\n    .map((segment, i) => {\n      if (i === 0) return 60 * Number(segment);\n      if (i === 1) return Number(segment);\n      else return Number(segment) / 1000;\n    })\n    .reduce((acc, cur) => acc + cur);\n};\n","import {\n  ISeason,\n  IRaceCalendarEvent,\n  IRaceDetails,\n  IStandingRow,\n} from \"../types\";\nimport { State } from \"./state\";\nimport { calendarToSeasons } from \"../utils\";\n\nexport type Action =\n  | {\n      type: \"SET_CALENDAR\";\n      payload: ISeason[];\n    }\n  | {\n      type: \"SET_RACES\";\n      payload: IRaceDetails;\n    }\n  | {\n      type: \"SET_STANDINGS\";\n      payload: IStandingRow[];\n    };\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"SET_CALENDAR\":\n      return { ...state, calendar: action.payload };\n    case \"SET_RACES\": {\n      const raceExists = state.races.find(\n        race => race.eventId === action.payload.eventId\n      );\n      if (raceExists) return state;\n      return { ...state, races: [...state.races, action.payload] };\n    }\n    case \"SET_STANDINGS\":\n      return { ...state, standings: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport const setCalendar = (calendar: IRaceCalendarEvent[]): Action => {\n  const seasons = calendarToSeasons(calendar);\n\n  return {\n    type: \"SET_CALENDAR\",\n    payload: seasons,\n  };\n};\n\nexport const setRaces = (race: IRaceDetails): Action => {\n  return {\n    type: \"SET_RACES\",\n    payload: race,\n  };\n};\n\nexport const setStandings = (standings: IStandingRow[]): Action => {\n  return {\n    type: \"SET_STANDINGS\",\n    payload: standings,\n  };\n};\n","import React from \"react\";\nimport { ISeason, IRaceDetails, IStandingRow } from \"../types\";\nimport { Action } from \"./reducer\";\n\nexport type State = {\n  calendar: ISeason[];\n  races: IRaceDetails[];\n  standings: IStandingRow[];\n};\n\nconst initialState: State = {\n  calendar: [],\n  races: [],\n  standings: [],\n};\n\nexport const StateContext = React.createContext<\n  [State, React.Dispatch<Action>]\n>([initialState, () => initialState]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children,\n}: StateProviderProps) => {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\n\nexport const useStateValue = () => React.useContext(StateContext);\n","import React from \"react\";\nimport Table from \"../Table\";\nimport LoadingIndicator from \"../LoadingIndicator\";\nimport { useStateValue } from \"../../state\";\n\nconst headerMap = {\n  date: \"Date\",\n  trackName: \"Track\",\n  qLaps: \"Q Laps\",\n  raceLaps: \"Race Laps\",\n  link: \"Results\",\n};\n\nconst headers = [\"date\", \"trackName\", \"qLaps\", \"raceLaps\", \"link\"];\n\nconst CalendarContent = () => {\n  const [{ calendar }] = useStateValue();\n  const isLoading = calendar.length === 0;\n\n  if (isLoading) {\n    return <LoadingIndicator />;\n  }\n\n  return (\n    <>\n      {calendar.map(season => (\n        <div key={season.seasonId}>\n          <h2>{season.seasonName}</h2>\n          <Table data={season.events} headers={headers} headerMap={headerMap} />\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default CalendarContent;\n","import React from \"react\";\nimport config from \"../../config\";\nimport { IRaceCalendarEvent } from \"../../types\";\nimport PageContainer from \"../PageContainer\";\nimport CalendarContent from \"./CalendarContent\";\nimport { Link } from \"react-router-dom\";\nimport { useStateValue, setCalendar } from \"../../state\";\n\nconst raceCalendarUrl = config.baseUrl + \"/races\";\n\nconst CalendarContainer = () => {\n  const [{ calendar }, dispatch] = useStateValue();\n  const isLoading = calendar.length === 0;\n\n  // Fetch calendar data from api\n  React.useEffect(() => {\n    const loadRaceCalendar = async () => {\n      try {\n        const response = await fetch(raceCalendarUrl);\n        const json = await response.json();\n        const dataWithLinks = json.map((event: IRaceCalendarEvent) => ({\n          ...event,\n          link: <Link to={config.getRaceUrl(event.eventId)}>Link</Link>,\n        })) as IRaceCalendarEvent[];\n        dispatch(setCalendar(dataWithLinks));\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    if (isLoading) {\n      loadRaceCalendar();\n    }\n  }, [dispatch, isLoading]);\n\n  return (\n    <PageContainer title=\"Kisakalenteri\">\n      <CalendarContent />\n    </PageContainer>\n  );\n};\n\nexport default CalendarContainer;\n","import React from \"react\";\nimport { IStandingRow } from \"../../types\";\nimport Table from \"../Table\";\n\ninterface Props {\n  standings: IStandingRow[];\n}\n\nconst headers = [\"driverName\", \"racesDriven\", \"points\", \"powerLimit\"];\n\nconst headerMap = {\n  driverName: \"Driver\",\n  racesDriven: \"Races\",\n  points: \"Points\",\n  powerLimit: \"Power Limit\",\n};\nconst StandingsContent = ({ standings }: Props) => {\n  if (!standings.length) return <div>No standings found.</div>;\n\n  const sortedStandings = standings.sort((a, b) => b.points - a.points);\n\n  return (\n    <div>\n      <h2>{standings[0].seasonName}</h2>\n      <Table data={sortedStandings} headers={headers} headerMap={headerMap} />\n    </div>\n  );\n};\n\nexport default StandingsContent;\n","import React from \"react\";\n\ninterface Props {\n  options: Array<any>;\n  selected: string;\n  setSelected: React.Dispatch<React.SetStateAction<string>>;\n}\n\nconst Dropdown = ({ options, selected, setSelected }: Props) => {\n  return (\n    <select\n      value={selected}\n      onChange={event => setSelected(event.target.value)}\n    >\n      {options.map(opt => (\n        <option key={opt.value} value={opt.value}>\n          {opt.content}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nexport default Dropdown;\n","import React from \"react\";\nimport config from \"../../config\";\nimport { setStandings, useStateValue } from \"../../state\";\n\nimport PageContainer from \"../PageContainer\";\nimport StandingsContent from \"./StandingsContent\";\nimport { IStandingRow } from \"../../types\";\nimport Dropdown from \"../Dropdown\";\nimport LoadingIndicator from \"../LoadingIndicator\";\n\nexport type Options = {\n  value: string;\n  content: string;\n};\n\nexport type StandingsHash = {\n  seasonId: string;\n  seasonName: string;\n};\n\nconst getOptions = (standings: IStandingRow[]): Options[] => {\n  const options: Options[] = [];\n\n  for (const row of standings) {\n    if (options.some(opt => row.seasonId === opt.value)) {\n      continue;\n    } else {\n      options.push({ value: row.seasonId, content: row.seasonName });\n    }\n  }\n\n  return options;\n};\n\nconst StandingsContainer = () => {\n  const [{ standings }, dispatch] = useStateValue();\n  const isLoading = standings.length === 0;\n  const [selected, setSelected] = React.useState<string>(\"0400\");\n\n  React.useEffect(() => {\n    const standingsUrl = config.baseUrl + \"/standings\";\n    const loadStandings = async () => {\n      try {\n        const response = await fetch(standingsUrl);\n        const json = await response.json();\n        dispatch(setStandings(json));\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    if (isLoading) {\n      loadStandings();\n    }\n  }, [dispatch, isLoading]);\n\n  if (isLoading) {\n    return <LoadingIndicator />;\n  }\n\n  const standingsToShow = standings.filter(row => row.seasonId === selected);\n\n  return (\n    <PageContainer title=\"Sarjataulukko\">\n      <Dropdown\n        options={getOptions(standings)}\n        selected={selected}\n        setSelected={setSelected}\n      />\n      <StandingsContent standings={standingsToShow} />\n    </PageContainer>\n  );\n};\n\nexport default StandingsContainer;\n","import React from \"react\";\n\nconst SNWContent = () => {\n  return (\n    <div>\n      <h2>Mikä on SNW?</h2>\n      <p>\n        Lorem ipsum, dolor sit amet consectetur adipisicing elit. Laudantium ut\n        tenetur, animi ratione voluptatem, illum saepe voluptatum beatae eius\n        earum, excepturi commodi veniam fugiat molestiae. Repudiandae adipisci\n        similique doloremque odio.\n      </p>\n      <p>\n        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aspernatur,\n        officiis dignissimos. Minima consequuntur perferendis rem deleniti\n        voluptatem deserunt, cum quae et exercitationem vel libero qui, officia\n        quaerat inventore? Laudantium, corrupti?\n      </p>\n    </div>\n  );\n};\n\nexport default SNWContent;\n","import React from \"react\";\nimport PageContainer from \"../PageContainer\";\nimport SNWContent from \"./SNWContent\";\n\nconst SNWContainer = () => {\n  return (\n    <PageContainer title=\"Sunday Night Wreckfest\">\n      <SNWContent />\n    </PageContainer>\n  );\n};\n\nexport default SNWContainer;\n","import React from \"react\";\nimport { IRaceDetails } from \"../../types\";\nimport Table from \"../Table\";\nimport { convertTimeToSecs } from \"../../utils\";\n\ninterface Props {\n  data?: IRaceDetails;\n}\n\nconst qHeaders = [\"driverName\", \"qTime\", \"group\"];\n\nconst qHeaderMap = {\n  driverName: \"Kuljettaja\",\n  qTime: \"Aika\",\n  group: \"Lohko\",\n};\n\nconst raceHeaders = [\n  \"driverName\",\n  \"seasonPoints\",\n  \"group\",\n  \"heatPositions\",\n  \"heatPoints\",\n];\n\nconst raceHeaderMap = {\n  driverName: \"Kuljettaja\",\n  seasonPoints: \"P\",\n  group: \"L\",\n  heatPositions: \"Lähtötulokset\",\n  heatPoints: \"Lähtöpisteet\",\n};\n\nconst RaceContent = ({ data }: Props) => {\n  if (!data) return <div>The race does not exist.</div>;\n\n  const qDetails = data.details.sort((a, b) => {\n    const aTime = convertTimeToSecs(a.qTime);\n    const bTime = convertTimeToSecs(b.qTime);\n    return aTime - bTime;\n  });\n\n  const raceDetails = data.details\n    .map(driver => ({\n      ...driver,\n      heatPoints: driver.heatPoints?.join(\", \"),\n      heatPositions: driver.heatPositions?.join(\", \"),\n    }))\n    .sort((a, b) => b.seasonPoints - a.seasonPoints);\n  return (\n    <div>\n      <table>\n        <tbody>\n          <tr>\n            <td>Päivä</td>\n            <td>{data.date}</td>\n          </tr>\n          <tr>\n            <td>Aika-ajokierrokset</td>\n            <td>{data.qLaps}</td>\n          </tr>\n          <tr>\n            <td>Kilpailukierrokset</td>\n            <td>{data.raceLaps}</td>\n          </tr>\n          <tr>\n            <td>Tehoraja</td>\n            <td>{data.hasPowerLimit ? \"X\" : \"\"}</td>\n          </tr>\n        </tbody>\n      </table>\n      <div>\n        <h2>Aika-ajotulokset</h2>\n        <Table data={qDetails} headers={qHeaders} headerMap={qHeaderMap} />\n      </div>\n      <div>\n        <h2>Kilpailutulokset</h2>\n        <Table\n          data={raceDetails}\n          headers={raceHeaders}\n          headerMap={raceHeaderMap}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default RaceContent;\n","import React from \"react\";\nimport PageContainer from \"../PageContainer\";\nimport { useParams } from \"react-router-dom\";\nimport config from \"../../config\";\nimport { setRaces } from \"../../state\";\nimport RaceContent from \"./RaceContent\";\nimport { useStateValue } from \"../../state\";\nimport LoadingIndicator from \"../LoadingIndicator\";\n\nconst RaceContainer = () => {\n  const { id } = useParams();\n  const [{ races }, dispatch] = useStateValue();\n  const isLoading = !races.some(race => race.eventId === id);\n\n  React.useEffect(() => {\n    const raceUrl = config.baseUrl + config.getRaceUrl(id);\n    const loadRaceData = async () => {\n      try {\n        const response = await fetch(raceUrl);\n        const json = await response.json();\n        dispatch(setRaces(json));\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    if (isLoading) {\n      loadRaceData();\n    }\n  }, [id, dispatch, isLoading]);\n\n  if (isLoading) {\n    return <LoadingIndicator />;\n  }\n\n  const race = races.find(race => race.eventId === id);\n\n  return (\n    <PageContainer title={`${race?.seasonName} | ${race?.trackName}`}>\n      <RaceContent data={race} />\n    </PageContainer>\n  );\n};\n\nexport default RaceContainer;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Navigation from \"./components/Navigation\";\nimport CalendarContainer from \"./components/calendar/CalendarContainer\";\nimport StandingsContainer from \"./components/standings/StandingsContainer\";\nimport SNWContainer from \"./components/snw/SNWContainer\";\nimport RaceContainer from \"./components/race/RaceContainer\";\nimport config from \"./config\";\n\nconst App = () => {\n  return (\n    <Router>\n      <div>\n        <Navigation />\n        <Switch>\n          <Route exact path=\"/\">\n            <CalendarContainer />\n          </Route>\n          <Route path={config.getRaceUrl(\":id\")}>\n            <RaceContainer />\n          </Route>\n          <Route path=\"/standings\">\n            <StandingsContainer />\n          </Route>\n          <Route path=\"/snw\">\n            <SNWContainer />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { StateProvider } from \"./state/state\";\nimport { reducer } from \"./state/reducer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}